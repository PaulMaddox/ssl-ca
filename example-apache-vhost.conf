LoadModule ssl_module modules/mod_ssl.so
Listen 443

# The most expensive part of SSL (latency & CPU wise) is the initial handshake.
# After the handshake a much faster symmetric encryption is used.
# As our clients are terminals connecting multiple times (rather than one-off)
# it makes sense to cache the handshake. Use a 64MB cyclic cache with a 300sec ttl.
SSLSessionCache shm:/tmp/httpd.ssl_cache(67108863)
SSLSessionCacheTimeout 300

<VirtualHost _default_:80>

  # Inject some client-side auth
  SSLProxyEngine On

  # Authenticate with the following cert
  # Cert must be in PEM format with the key concatinated afterwards
  # Key must not be encrypted with a passhrase (not supported)
  SSLProxyMachineCertificateFile  /tmp/t192-0-0-1.crt

  # Require that the upstream server is presenting a valid
  # certificate signed by our CA (this is mutual authentication)
  # Will show a HTTP/502 error on failure
  SSLProxyCACertificateFile /tmp/ca.crt
  SSLProxyVerify require

  <Proxy balancer://datacentre>

    # This is the primary site - all requests will be directed here
    # unless they start failing (non 200 responses), at which point
    # mod_proxy_balancer will redirect to secondary site.
    BalancerMember https://localhost/ loadfactor=1

    # In theory if we outscale a single product installation and
    # choose to scale out by plugging in another unit we could balance
    # live traffic across multiple sites like so:
    BalancerMember https://localhost/ loadfactor=1

    # This is a hot-standby dr site balancer member (+H)
    # It will only be used if no other balancer members are available
    BalancerMember https://localhost/ status=+H

  </Proxy>

  ProxyPass     	/ balancer://datacentre/
  ProxyPassReverse  	/ balancer://datacentre/

</VirtualHost>

<VirtualHost _default_:443>

  DocumentRoot /var/www/protected

  SSLEngine on
  SSLProtocol -ALL +SSLv3 +TLSv1
  SSLCipherSuite ALL:!ADH:!NULL:!EXP:!SSLv2:!LOW:!MEDIUM:RC4+RSA:+HIGH

  SSLCACertificateFile /tmp/ca.crt
  SSLCertificateFile /tmp/java.crt
  SSLCertificateKeyFile /tmp/java.key

  ScriptAlias   /user /var/www/cgi-bin/show-user.pl

  # Require that any access attemps to '/' have a valid client
  # certificate signed by our trusted CA in order to access content.
  # Failure will result in a HTTP/502 response.
  <Location />

    SSLCACertificateFile /tmp/ca.crt
    SSLVerifyClient require
    SSLVerifyDepth  5

    SSLOptions +StrictRequire
    SSLUserName SSL_CLIENT_S_DN_CN
    SSLRequireSSL

  </Location>

  <Location /unprotected>
    SSLVerifyClient none
    SSLVerifyDepth 999
  </Location>

</VirtualHost>
